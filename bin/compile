#!/bin/sh

#############################################################
## Provides a modular system for custom heroku deployments ##
##							   ##
## Author: Jorgen Evens <jorgen@evens.eu>                  ##
## License: New BSD License				   ##
#############################################################

BIN_DIR=$(dirname $0)

# Include helper
. "$BIN_DIR/helper.sh"

INSTALL="${CONFIG_DIR}/install"
if [ -f "$INSTALL" ]; then
	INSTALL=`cat "$INSTALL"`
else
	INSTALL=""
fi

PACKAGE_MANAGER_ENABLED=0
if [ -f "${CONFIG_DIR}/repos" ]; then
	print_action "Package manager enabled."
	print "Repositories"
	for repo in "${CONFIG_DIR}/repos"; do
		print "- $repo"
	done
	PACKAGE_MANAGER_ENABLED=1
	. "${BIN_DIR}/package-manager.sh"
fi

# Initial boot file
cat > "${BUILD_DIR}/boot.sh" << EOF
#!/bin/sh

EOF
chmod +x "${BUILD_DIR}/boot.sh"

# Mark a dependency as installed.
dependency_mark() {
        INSTALLED_DEPENDENCIES="$INSTALLED_DEPENDENCIES $1"
}

# Include a dependency because someone relies on this.
dependency_require() {
	package=$1
	# Test if it was included already
	echo " ${INSTALLED_DEPENDENCIES} " | grep -q "${package}"
	if [ $? -eq 0 ]; then
		return;
	fi

	if [ -f "${CONFIG_DIR}/installers/${package}.sh" ]; then
		. "${CONFIG_DIR}/installers/${package}.sh"
		dependency_mark "${package}"
		return;
	fi

	if [ -f "${BIN_DIR}/../installers/${package}.sh" ]; then
		. "${BIN_DIR}/../installers/${package}.sh"
		dependency_mark "${package}"
		return
	fi

	if [ "$PACKAGE_MANAGER_ENABLED" -gt 0 ] && [ "$(package_search ${package})" != "" ]; then
		package_install ${package}
	fi

	print_action "Installer for ${package} not found!"
	exit 1
}

# Install all packages contained within $INSTALL
for package in $INSTALL; do
	dependency_require "${package}"
done

if [ -f "${CONFIG_DIR}/compile" ]; then
	. "${CONFIG_DIR}/compile"
fi